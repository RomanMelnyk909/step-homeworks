onStateChange = (Id) => {
    const index = this.state.List.findIndex((elem) => elem.Id === Id);
    const contact = this.state.List[index];

    switch (contact.Status) {
      case "Friend":
        contact.Status = "Work";
        break;
      case "Work":
        contact.Status = "Family";
        break;
      case "Family":
        contact.Status = "Private";
        break;
      case "Private":
        contact.Status = "Friend";
        break;
      default:
    }

    const tmpList = this.state.List.slice();
    tmpList[index] = contact;

    this.setState({
      List: tmpList,
    });
  };

  
  onDeleteContactHandler = (Id) => {
    const list = this.state.List.filter((item) => item.Id !== Id);

    API.updateDatabase(list);

    this.setState((prevState) => ({
      ...prevState,
      List: prevState.List.filter((item) => item.Id !== Id),
    }));
  };

  onAddNewContact = (newContact) => {
   
    const list = [newContact, ...this.state.List];
    API.updateDatabase(list);
    this.setState((prevState) => ({
      ...prevState,
      List: [newContact, ...prevState.List],
    }));
  };

  onGetCurrentIndex = (Id) => {
    const index = this.state.List.findIndex((elem) => elem.Id === Id);
    const currentContact = this.state.List[index];
    this.setState({
      CurrentContact: currentContact,
    });
  };

  onEditContact = (editedContact) => {
    const list = this.state.List.map((item) => {
      if (item.Id === editedContact.Id) {
        return editedContact;
      }
      return item;
    });

    API.updateDatabase(list);

    this.setState((prevState) => ({
      ...prevState,
      List: prevState.List.map((item) => {
        if (item.Id === editedContact.Id) {
          return editedContact;
        }
        return item;
      }),
    }));
  };